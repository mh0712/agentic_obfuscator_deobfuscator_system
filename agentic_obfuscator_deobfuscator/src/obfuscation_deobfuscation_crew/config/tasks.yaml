input_analysis_task:
  description: |
    using detect_code_format_tool tool, The task is to analyze the provided code input from {file_path}. The process involves multiple steps:
    1. **Code Type Detection**: Is the input a script or binary? Analyze the structure and headers to identify this.
    2. **Language Detection**: What programming language is the code written in? This includes determining whether it's Python, JavaScript, or something unknown.
    3. **Obfuscation Detection**: Does the code appear to be obfuscated? This requires looking for patterns that suggest code has been altered for the purpose of hiding its logic.

    Each of these steps should be validated using syntax patterns, encoding anomalies, and variable naming conventions.

  expected_output: |
    {
      "code_type": "script" | "binary",
      "language": "python" | "javascript" | "unknown",
      "is_obfuscated": true | false
    }

  agent: input_parser




# semantic_validation_task:
#   name: "Post-Obfuscation Validation"
#   description: |
#     Symbolically or heuristically analyze the obfuscated binary and compare with the original binary.
#     Techniques may include:
#     - Dynamic function call traces
#     - Symbolic instruction equivalence
#     - Decompiler-based comparison
#     Provide a report indicating any semantic mismatches or functional divergence.
#   expected_output: |
#     {
#       "validation_status": "Pass|Fail",
#       "equivalence_score": 0.0 - 1.0,
#       "issues": [
#         { "function": "foo", "reason": "Control flow altered" }
#       ]
#     }
#   agent: binary_analysis_agent

