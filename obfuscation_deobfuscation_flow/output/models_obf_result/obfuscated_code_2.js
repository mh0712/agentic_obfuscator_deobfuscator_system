class n{constructor(r,n=0){this.n=r,this.r=n}t(r){if(r>0){this.r+=r,c.log(`${this.n} deposited $${r}. New balance: $${this.r}`)}else c.log('Deposit amount must be greater than 0.')}w(r){if(r>0&&r<=this.r)this.r-=r,c.log(`${this.n} withdrew $${r}. New balance: $${this.r}`);else r>this.r?c.log('Insufficient balance for withdrawal.'):c.log('Withdrawal amount must be greater than 0.')}h(r,n){r>0&&r<=this.r?(this.w(r),n.t(r),c.log(`${this.n} transferred $${r} to ${n.n}.`)):c.log('Transfer failed. Insufficient balance or invalid amount.')}u(){c.log(`${this.n}'s Account: $${this.r}`)}}class i{constructor(){this.n=[]}h(r){this.n.push(r)}g(){0===this.n.length?c.log('No transactions recorded.'):(c.log('Transaction History:'),this.n.forEach((r,n)=>{c.log(`${n+1}. ${r}`)}))}}const c=console,o=new n('Alice',1e3),e=new n('Bob',500),s=new i;o.t(200),o.w(150),e.t(300),o.h(500,e),s.h('Alice deposited $200'),s.h('Alice withdrew $150'),s.h('Bob deposited $300'),s.h('Alice transferred $500 to Bob'),o.u(),e.u(),s.g()